{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/containers/Projects.jsx\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { Typography } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as api_links from \"../APILinks\";\nimport ProjectInfo from \"../components/ProjectInfo\";\nimport AlertDialog from \"../components/AlertDialog\";\nimport UtilityComponent from \"../components/UtilityComponent\";\nimport HEADER_NAV_TITLES from \"../header_nav_titles\";\nimport * as apiProjectsActions from \"../store/actions/api/project/projects\";\nimport TitleCard from \"../components/TitleCard\";\n\nconst Projects = props => {\n  const [alert, setAlert] = React.useState({\n    open: false\n  });\n\n  const openAlert = (action, title, description, cancel, confirm, data) => {\n    setAlert({\n      open: true,\n      title,\n      description,\n      cancel,\n      confirm,\n      action,\n      data\n    });\n  };\n\n  const closeAlert = () => {\n    setAlert(prevAlertState => ({\n      open: false\n    }));\n  };\n\n  const confirmAlert = (event, choice, id) => {\n    switch (event) {\n      case \"delete_project\":\n        choice && handleProjectDelete(id);\n        break;\n    }\n  };\n\n  const handleProjectDelete = projectID => {\n    axios.delete(api_links.API_ROOT + `projects/${projectID}/`).then(res => {\n      let audio = new Audio(\"../sounds/navigation_selection-complete-celebration.wav\");\n      audio.play();\n      setTimeout(() => {\n        window.location.href = \"/projects\";\n      }, 1000);\n    }).catch(err => {\n      console.log(err);\n      let audio = new Audio(\"../sounds/alert_error-03.wav\");\n      audio.play();\n    });\n  };\n\n  React.useEffect(() => {\n    setAlert({\n      open: false\n    });\n    props.fetchProjects();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UtilityComponent, {\n    title: HEADER_NAV_TITLES.PROJECTS,\n    page: \"PROJECTS\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TitleCard, {\n    title: \"Projects\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), props.projects != [] && props.projects.map(project => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProjectInfo, {\n    projectID: project.id,\n    projectslug: project.projectslug,\n    openAlert: openAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(AlertDialog, {\n    open: alert.open,\n    action: alert.action,\n    title: alert.title || \"\",\n    description: alert.description || \"\",\n    cancel: alert.cancel || \"\",\n    confirm: alert.confirm || \"\",\n    confirmAlert: confirmAlert,\n    data: alert.data || \"\",\n    closeAlert: closeAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null,\n    projects: state.projects.projects\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchProjects: () => dispatch(apiProjectsActions.fetchProjects())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Projects));","map":{"version":3,"sources":["/app/frontend/src/containers/Projects.jsx"],"names":["React","Card","Typography","axios","connect","withRouter","api_links","ProjectInfo","AlertDialog","UtilityComponent","HEADER_NAV_TITLES","apiProjectsActions","TitleCard","Projects","props","alert","setAlert","useState","open","openAlert","action","title","description","cancel","confirm","data","closeAlert","prevAlertState","confirmAlert","event","choice","id","handleProjectDelete","projectID","delete","API_ROOT","then","res","audio","Audio","play","setTimeout","window","location","href","catch","err","console","log","useEffect","fetchProjects","PROJECTS","projects","map","project","projectslug","mapStateToProps","state","isAuthenticated","auth","token","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,OAAO,KAAKC,kBAAZ,MAAoC,uCAApC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,KAAK,CAACiB,QAAN,CAAe;AACvCC,IAAAA,IAAI,EAAE;AADiC,GAAf,CAA1B;;AAGA,QAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,IAA9C,KAAuD;AACvET,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAE,IADC;AAEPG,MAAAA,KAFO;AAGPC,MAAAA,WAHO;AAIPC,MAAAA,MAJO;AAKPC,MAAAA,OALO;AAMPJ,MAAAA,MANO;AAOPK,MAAAA;AAPO,KAAD,CAAR;AASD,GAVD;;AAYA,QAAMC,UAAU,GAAG,MAAM;AACvBV,IAAAA,QAAQ,CAAEW,cAAD,KAAqB;AAC5BT,MAAAA,IAAI,EAAE;AADsB,KAArB,CAAD,CAAR;AAGD,GAJD;;AAMA,QAAMU,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,EAAhB,KAAuB;AAC1C,YAAQF,KAAR;AACE,WAAK,gBAAL;AACEC,QAAAA,MAAM,IAAIE,mBAAmB,CAACD,EAAD,CAA7B;AACA;AAHJ;AAKD,GAND;;AAQA,QAAMC,mBAAmB,GAAIC,SAAD,IAAe;AACzC9B,IAAAA,KAAK,CACF+B,MADH,CACU5B,SAAS,CAAC6B,QAAV,GAAsB,YAAWF,SAAU,GADrD,EAEGG,IAFH,CAESC,GAAD,IAAS;AACb,UAAIC,KAAK,GAAG,IAAIC,KAAJ,CACV,yDADU,CAAZ;AAGAD,MAAAA,KAAK,CAACE,IAAN;AACAC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,WAAvB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KAVH,EAWGC,KAXH,CAWUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAIR,KAAK,GAAG,IAAIC,KAAJ,CAAU,8BAAV,CAAZ;AACAD,MAAAA,KAAK,CAACE,IAAN;AACD,KAfH;AAgBD,GAjBD;;AAmBAxC,EAAAA,KAAK,CAACiD,SAAN,CAAgB,MAAM;AACpBjC,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGAJ,IAAAA,KAAK,CAACoC,aAAN;AACD,GALD,EAKG,EALH;AAOA,sBACE,uDACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAExC,iBAAiB,CAACyC,QAA3C;AAAqD,IAAA,IAAI,EAAC,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIGrC,KAAK,CAACsC,QAAN,IAAkB,EAAlB,IACCtC,KAAK,CAACsC,QAAN,CAAeC,GAAf,CAAoBC,OAAD,iBACjB,uDACE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEA,OAAO,CAACvB,EADrB;AAEE,IAAA,WAAW,EAAEuB,OAAO,CAACC,WAFvB;AAGE,IAAA,SAAS,EAAEpC,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CALJ,eAcE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEJ,KAAK,CAACG,IADd;AAEE,IAAA,MAAM,EAAEH,KAAK,CAACK,MAFhB;AAGE,IAAA,KAAK,EAAEL,KAAK,CAACM,KAAN,IAAe,EAHxB;AAIE,IAAA,WAAW,EAAEN,KAAK,CAACO,WAAN,IAAqB,EAJpC;AAKE,IAAA,MAAM,EAAEP,KAAK,CAACQ,MAAN,IAAgB,EAL1B;AAME,IAAA,OAAO,EAAER,KAAK,CAACS,OAAN,IAAiB,EAN5B;AAOE,IAAA,YAAY,EAAEI,YAPhB;AAQE,IAAA,IAAI,EAAEb,KAAK,CAACU,IAAN,IAAc,EARtB;AASE,IAAA,UAAU,EAAEC,UATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AA4BD,CApFD;;AAsFA,MAAM8B,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,eAAe,EAAED,KAAK,CAACE,IAAN,CAAWC,KAAX,KAAqB,IADjC;AAELR,IAAAA,QAAQ,EAAEK,KAAK,CAACL,QAAN,CAAeA;AAFpB,GAAP;AAID,CALD;;AAOA,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,aAAa,EAAE,MAAMY,QAAQ,CAACnD,kBAAkB,CAACuC,aAAnB,EAAD;AADxB,GAAP;AAGD,CAJD;;AAMA,eAAe7C,UAAU,CACvBD,OAAO,CAACoD,eAAD,EAAkBK,kBAAlB,CAAP,CAA6ChD,QAA7C,CADuB,CAAzB","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { Typography } from \"@material-ui/core\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport * as api_links from \"../APILinks\";\nimport ProjectInfo from \"../components/ProjectInfo\";\nimport AlertDialog from \"../components/AlertDialog\";\nimport UtilityComponent from \"../components/UtilityComponent\";\nimport HEADER_NAV_TITLES from \"../header_nav_titles\";\nimport * as apiProjectsActions from \"../store/actions/api/project/projects\";\nimport TitleCard from \"../components/TitleCard\";\n\nconst Projects = (props) => {\n  const [alert, setAlert] = React.useState({\n    open: false,\n  });\n  const openAlert = (action, title, description, cancel, confirm, data) => {\n    setAlert({\n      open: true,\n      title,\n      description,\n      cancel,\n      confirm,\n      action,\n      data,\n    });\n  };\n\n  const closeAlert = () => {\n    setAlert((prevAlertState) => ({\n      open: false,\n    }));\n  };\n\n  const confirmAlert = (event, choice, id) => {\n    switch (event) {\n      case \"delete_project\":\n        choice && handleProjectDelete(id);\n        break;\n    }\n  };\n\n  const handleProjectDelete = (projectID) => {\n    axios\n      .delete(api_links.API_ROOT + `projects/${projectID}/`)\n      .then((res) => {\n        let audio = new Audio(\n          \"../sounds/navigation_selection-complete-celebration.wav\"\n        );\n        audio.play();\n        setTimeout(() => {\n          window.location.href = \"/projects\";\n        }, 1000);\n      })\n      .catch((err) => {\n        console.log(err);\n        let audio = new Audio(\"../sounds/alert_error-03.wav\");\n        audio.play();\n      });\n  };\n\n  React.useEffect(() => {\n    setAlert({\n      open: false,\n    });\n    props.fetchProjects();\n  }, []);\n\n  return (\n    <>\n      <UtilityComponent title={HEADER_NAV_TITLES.PROJECTS} page=\"PROJECTS\" />\n\n      <TitleCard title=\"Projects\" />\n      {props.projects != [] &&\n        props.projects.map((project) => (\n          <>\n            <ProjectInfo\n              projectID={project.id}\n              projectslug={project.projectslug}\n              openAlert={openAlert}\n            />\n          </>\n        ))}\n      <AlertDialog\n        open={alert.open}\n        action={alert.action}\n        title={alert.title || \"\"}\n        description={alert.description || \"\"}\n        cancel={alert.cancel || \"\"}\n        confirm={alert.confirm || \"\"}\n        confirmAlert={confirmAlert}\n        data={alert.data || \"\"}\n        closeAlert={closeAlert}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.auth.token !== null,\n    projects: state.projects.projects,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchProjects: () => dispatch(apiProjectsActions.fetchProjects()),\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Projects)\n);\n"]},"metadata":{},"sourceType":"module"}