{"ast":null,"code":"import * as api_links from \"./APILinks\";\n\nclass WebsocketService {\n  static getInstance() {\n    if (!WebsocketService.instance) {\n      WebsocketService.instance = new WebsocketService();\n    }\n\n    return WebsocketService.instance;\n  }\n\n  constructor() {\n    this.callbacks = {};\n    this.sockRef = null;\n  }\n\n  connect(issue_id) {\n    const path = api_links.WEBSOCKET_ROOT + `issue_comments/${issue_id}/`;\n    this.sockRef = new WebSocket(path);\n\n    this.sockRef.onopen = () => {\n      console.log(\"Websocket open.\");\n    };\n\n    this.socketNewComment(JSON.stringify({\n      command: \"fetch_comments\"\n    }));\n\n    this.sockRef.onmessage = e => {\n      this.socketNewComment(e.data);\n    };\n\n    this.sockRef.onerror = e => {\n      console.log(e);\n    };\n\n    this.sockRef.onclose = () => {\n      console.log(\"Websocket closed.\");\n    };\n  }\n\n  disconnect() {\n    this.sockRef.close();\n  }\n\n  socketNewComment(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n\n    if (command === \"comments\") {\n      this.callbacks[command](parsedData.comments);\n    }\n\n    if (command === \"new_comment\") {\n      this.callbacks[command](parsedData.comment);\n    }\n\n    if (command === \"delete_comment\") {\n      this.callbacks[command](parsedData.comment_id);\n    }\n  }\n\n  fetchComments(issue) {\n    this.sendMessage({\n      command: \"fetch_comments\",\n      issue: issue\n    });\n  }\n\n  newChatComment(comment) {\n    this.sendMessage({\n      command: \"new_comment\",\n      commentor: comment.commentor,\n      text: comment.text,\n      issue: comment.issue\n    });\n  }\n\n  deleteComment(comment) {\n    this.sendMessage({\n      command: \"delete_comment\",\n      comment_id: comment\n    });\n  }\n\n  addCallbacks(commentsCallback, newCommentCallback, deleteCommentCallback) {\n    this.callbacks[\"comments\"] = commentsCallback;\n    this.callbacks[\"new_comment\"] = newCommentCallback;\n    this.callbacks[\"delete_comment\"] = deleteCommentCallback;\n  }\n\n  sendMessage(data) {\n    try {\n      this.sockRef.send(JSON.stringify({ ...data\n      }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.sockRef.readyState;\n  }\n\n}\n\nWebsocketService.instance = null;\nconst WebSocketInstance = WebsocketService.getInstance();\nexport default WebSocketInstance;","map":{"version":3,"sources":["/app/frontend/src/websocket.js"],"names":["api_links","WebsocketService","getInstance","instance","constructor","callbacks","sockRef","connect","issue_id","path","WEBSOCKET_ROOT","WebSocket","onopen","console","log","socketNewComment","JSON","stringify","command","onmessage","e","data","onerror","onclose","disconnect","close","parsedData","parse","Object","keys","length","comments","comment","comment_id","fetchComments","issue","sendMessage","newChatComment","commentor","text","deleteComment","addCallbacks","commentsCallback","newCommentCallback","deleteCommentCallback","send","err","message","state","readyState","WebSocketInstance"],"mappings":"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","sourcesContent":["import * as api_links from \"./APILinks\";\n\nclass WebsocketService {\n  static instance = null;\n  callbacks = {};\n\n  static getInstance() {\n    if (!WebsocketService.instance) {\n      WebsocketService.instance = new WebsocketService();\n    }\n    return WebsocketService.instance;\n  }\n\n  constructor() {\n    this.sockRef = null;\n  }\n\n  connect(issue_id) {\n    const path = api_links.WEBSOCKET_ROOT + `issue_comments/${issue_id}/`;\n    this.sockRef = new WebSocket(path);\n    this.sockRef.onopen = () => {\n      console.log(\"Websocket open.\");\n    };\n    this.socketNewComment(\n      JSON.stringify({\n        command: \"fetch_comments\",\n      })\n    );\n    this.sockRef.onmessage = (e) => {\n      this.socketNewComment(e.data);\n    };\n    this.sockRef.onerror = (e) => {\n      console.log(e);\n    };\n    this.sockRef.onclose = () => {\n      console.log(\"Websocket closed.\");\n    };\n  }\n\n  disconnect() {\n    this.sockRef.close();\n  }\n\n  socketNewComment(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n    if (command === \"comments\") {\n      this.callbacks[command](parsedData.comments);\n    }\n    if (command === \"new_comment\") {\n      this.callbacks[command](parsedData.comment);\n    }\n    if (command === \"delete_comment\") {\n      this.callbacks[command](parsedData.comment_id);\n    }\n  }\n\n  fetchComments(issue) {\n    this.sendMessage({\n      command: \"fetch_comments\",\n      issue: issue,\n    });\n  }\n\n  newChatComment(comment) {\n    this.sendMessage({\n      command: \"new_comment\",\n      commentor: comment.commentor,\n      text: comment.text,\n      issue: comment.issue,\n    });\n  }\n\n  deleteComment(comment) {\n    this.sendMessage({\n      command: \"delete_comment\",\n      comment_id: comment,\n    });\n  }\n\n  addCallbacks(commentsCallback, newCommentCallback, deleteCommentCallback) {\n    this.callbacks[\"comments\"] = commentsCallback;\n    this.callbacks[\"new_comment\"] = newCommentCallback;\n    this.callbacks[\"delete_comment\"] = deleteCommentCallback;\n  }\n\n  sendMessage(data) {\n    try {\n      this.sockRef.send(JSON.stringify({ ...data }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.sockRef.readyState;\n  }\n}\n\nconst WebSocketInstance = WebsocketService.getInstance();\n\nexport default WebSocketInstance;\n"]},"metadata":{},"sourceType":"module"}