# Generated by Django 3.1.1 on 2020-09-26 11:29

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djrichtextfield.models
import pesticide_app.models.issue_image
import pesticide_app.models.project_icon


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=50)),
                ('first_name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('is_master', models.BooleanField(blank=True, default=False, null=True)),
                ('enrollment_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('degree', models.CharField(blank=True, max_length=50, null=True)),
                ('branch', models.CharField(blank=True, max_length=50, null=True)),
                ('current_year', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('access_token', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('refresh_token', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('display_picture', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', djrichtextfield.models.RichTextField(blank=True)),
                ('timestamp', models.DateTimeField()),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issue_asignee', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='IssueStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_text', models.CharField(max_length=30, unique=True)),
                ('color', models.CharField(default='#217bf3', max_length=10)),
                ('type', models.CharField(choices=[('Pending', 'Pending'), ('Closed', 'Closed'), ('Resolved', 'Resolved')], default='Pending', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('wiki', djrichtextfield.models.RichTextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('link', models.URLField(blank=True, default='', null=True)),
                ('status', models.CharField(blank=True, choices=[('Testing', 'Testing'), ('Deployed', 'Deployed'), ('Production', 'Production'), ('Development', 'Development'), ('Scrapped', 'Scrapped'), ('Finished', 'Finished')], default='Testing', max_length=20, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, related_name='project_member_related', related_query_name='project_member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_text', models.CharField(max_length=20, unique=True)),
                ('color', models.CharField(default='#775ada', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='EmailSubscription',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='email_subscriptions', serialize=False, to='pesticide_app.user')),
                ('on_new_project', models.BooleanField(default=True)),
                ('on_project_membership', models.BooleanField(default=True)),
                ('on_project_status_change', models.BooleanField(default=True)),
                ('on_new_issue', models.BooleanField(default=True)),
                ('on_issue_assign', models.BooleanField(default=True)),
                ('on_issue_status_change', models.BooleanField(default=True)),
                ('on_new_comment', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectIcon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=pesticide_app.models.project_icon.upload_path)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='project_icon', to='pesticide_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='IssueImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=pesticide_app.models.issue_image.upload_path)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pesticide_app.issue')),
            ],
        ),
        migrations.AddField(
            model_name='issue',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pesticide_app.project'),
        ),
        migrations.AddField(
            model_name='issue',
            name='reporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_creator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='issue',
            name='status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pesticide_app.issuestatus'),
        ),
        migrations.AddField(
            model_name='issue',
            name='tags',
            field=models.ManyToManyField(blank=True, to='pesticide_app.Tag'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', djrichtextfield.models.RichTextField()),
                ('timestamp', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('commentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pesticide_app.issue')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
    ]
